람다 정리중.

객체지향 프로그래밍

그 이전엔 리스프(Lisp) or 스킴(Scheme)같은 함수형 언어가 있었다.

함수형 언어의 장점 - 병행 프로그래밍 or 이벤트 구동(반응형) 프로그래밍에 잘 부합함

객체지향 + 함수형 프로그래밍 접목 = 굳!!

언어에서 함수 표현식을 위한 편리한 문법을 갖추고 있다면 컬렉션 라이브러리는 강력한 API를 제공할수 있다.

자바8 = 객체지향 + 함수형 프로그래밍 구문


-

람다 표현식(lambda expression)은 나중에 한 번 이상 실행할 수 있도록 전달할 수 있는 코드 블럭이다.

자바8 : Swing -> JavaFX

자바에서는 코드 블럭을 전달하기 위해서는 최소 단위가 클래스기 때문에 클래스인스턴스를 생성해야 했다.

자바는 단순함과 일관성이 강력한 힘.

코드 블록을 직접 다룰 수 있는 다른 언어에서는 스레드 생성이나 버튼 클릭 처리기 등록이 쉬워진 것에 그치지 않고 API가 더 단순해지고 일관성 있고 더 강력해졌다.


논리학자 알론조 처치(Alonzo Church)는 수학 함수가 효과적으로 계산 가능한 단위가 되는 의미를 공식화하고자 했다. 처치는 파라미터를 표기하는 데 그리스 문자 람다를 사용했다.

단일 추상 메소드를 갖춘 인터페이스의 객체를 기대할 때 람다 표현식을 사용할 수 있다. 이러한 인터페이스를 함수형 인터페이스라고 한다.

자바 설계자들은 언어에 함수 타입을 추가하는 대신 인터페이스라는 친숙한 개념을 고수하기로 하였다.

Object타입 변수에도 람다 표현식을 대입할 수 없다. Object는 함수형 인터페이스가 아니다.

java.util.function에 함수형 인터페이스를 정의하고 있다.

함수형 인터페이스에 @FunctionaInterface 어노테이션을 붙일 수 있다. 첫째, 컴파일러에서 어노테이션이 붙은 엔티티가 단일 추상 메소드를 찾춘 인터페이스인지 검사한다. 둘때, javadoc페이지에서 해당 인터페이스가 함수형 인터페이스임을 알리는 문장을 포함한다.

어노테이션을 반드시 사용해야 하는 것은 아니다. 정의에 따르면 단일 추상 메소드를 갖춘 모든 인터페이스가 곧 함수형 인터페이스이다. 그럼에도 @FunctionaInterface 를 사용하는 것이 좋은 생각이다.

람다 표현식이 함수형 인터페이스의 인스턴스로 변환될 때 검사 예외(checked exception)가 문제가 된다는 점을 유의하기 바란다.

람다 표현식 몸체에서 예외를 잡을 수 있다. 그렇지 않으면 해당 예외를 던질 수 있는 단일 추상 메서드를 갖춘 인터페이스에 람다를 대입한다.
